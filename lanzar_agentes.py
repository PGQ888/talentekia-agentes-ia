#!/usr/bin/env python3
"""
Script para lanzar agentes de TalentekIA basado en la configuraci√≥n TOML
Este script lee la configuraci√≥n y ejecuta los scripts de los agentes
"""
import os
import sys
import toml
import logging
import argparse
import subprocess
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("TalentekIA-AgentLauncher")

def print_banner():
    """Muestra el banner de inicio de la aplicaci√≥n"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                    ‚ïë
‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó      ‚ïë
‚ïë   ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë      ‚ïë
‚ïë      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë      ‚ïë
‚ïë      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë      ‚ïë
‚ïë      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë      ‚ïë
‚ïë      ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù      ‚ïë
‚ïë                                                    ‚ïë
‚ïë              Lanzador de Agentes TOML              ‚ïë
‚ïë                                                    ‚ïë
‚ïë          Optimizado para Apple Silicon             ‚ïë
‚ïë                                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)

def cargar_variables_entorno():
    """Carga variables de entorno desde el archivo .env"""
    try:
        # Intentar cargar desde .env en el directorio actual
        env_path = Path('.env')
        if env_path.exists():
            logger.info(f"Cargando variables de entorno desde {env_path}")
            load_dotenv(env_path)
            return True
        else:
            logger.warning("No se encontr√≥ archivo .env en el directorio actual")
            return False
    except Exception as e:
        logger.error(f"Error al cargar variables de entorno: {str(e)}")
        return False

def cargar_configuracion(path_toml):
    """Carga la configuraci√≥n desde un archivo TOML"""
    try:
        logger.info(f"Cargando configuraci√≥n desde {path_toml}")
        with open(path_toml, "r") as f:
            return toml.load(f)
    except Exception as e:
        logger.error(f"Error al cargar la configuraci√≥n TOML: {str(e)}")
        return None

def ejecutar_agentes(config, modo_real=False):
    """Ejecuta los agentes definidos en la configuraci√≥n TOML"""
    # Contador para estad√≠sticas
    total = 0
    exitosos = 0
    fallidos = 0
    
    # Obtener la ruta base para los scripts
    ruta_base = ""
    if "entorno" in config and "ruta_base" in config["entorno"]:
        ruta_base_raw = config["entorno"]["ruta_base"]
        # Expandir ~ a la ruta del home del usuario
        ruta_base = os.path.expanduser(ruta_base_raw)
    
    # Hora de inicio
    tiempo_inicio = datetime.now()
    
    # Procesar cada secci√≥n que comienza con "agente_"
    for key, value in config.items():
        if key.startswith("agente_"):
            total += 1
            nombre = value.get("nombre", key)
            script_path = value.get("script", "")
            
            # Si la ruta no es absoluta y tenemos una ruta base, combinarlas
            if script_path and not os.path.isabs(script_path) and ruta_base:
                script_path = os.path.join(ruta_base, script_path)
            
            # Verificar si el script existe
            script_exists = Path(script_path).exists() if script_path else False
            
            print(f"\n{'='*50}")
            print(f"‚ñ∂Ô∏è Ejecutando agente: {nombre}")
            print(f"üìÑ Script: {script_path}")
            print(f"{'='*50}")
            
            if script_path and script_exists:
                try:
                    # Ejecutar el script
                    logger.info(f"Ejecutando script: {script_path}")
                    start_time = datetime.now()
                    
                    # Preparar entorno para el script
                    env = os.environ.copy()
                    
                    # A√±adir par√°metros espec√≠ficos del agente como variables de entorno
                    for param_key, param_value in value.items():
                        if isinstance(param_value, str):  # Solo pasar strings como variables de entorno
                            env_key = f"AGENT_{param_key.upper()}"
                            env[env_key] = param_value
                    
                    # A√±adir modo real si est√° activado
                    if modo_real:
                        env["AGENT_MODE"] = "real"
                    else:
                        env["AGENT_MODE"] = "simulation"
                    
                    # Determinar el comando a ejecutar
                    if script_path.endswith(".py"):
                        result = subprocess.run(["python3", script_path], 
                                              capture_output=True, 
                                              text=True,
                                              env=env)
                    else:
                        result = subprocess.run([script_path], 
                                              capture_output=True, 
                                              text=True,
                                              env=env)
                    
                    # Calcular duraci√≥n
                    end_time = datetime.now()
                    duration = (end_time - start_time).total_seconds()
                    
                    # Verificar resultado
                    if result.returncode == 0:
                        exitosos += 1
                        print(f"‚úÖ Ejecuci√≥n exitosa en {duration:.2f} segundos")
                        # Mostrar salida del script (limitada a 10 l√≠neas)
                        output_lines = result.stdout.strip().split('\n')
                        if output_lines and output_lines[0]:
                            print("\nSalida del script:")
                            for i, line in enumerate(output_lines[:10]):
                                print(f"  {line}")
                            if len(output_lines) > 10:
                                print(f"  ... y {len(output_lines) - 10} l√≠neas m√°s")
                    else:
                        fallidos += 1
                        print(f"‚ùå Error en la ejecuci√≥n (c√≥digo {result.returncode})")
                        if result.stderr:
                            print("\nError:")
                            for line in result.stderr.strip().split('\n')[:5]:
                                print(f"  {line}")
                
                except Exception as e:
                    fallidos += 1
                    logger.error(f"Error al ejecutar el agente '{nombre}': {str(e)}")
                    print(f"‚ùå Error: {str(e)}")
            else:
                fallidos += 1
                logger.error(f"No se encontr√≥ el script del agente '{nombre}': {script_path}")
                print(f"‚ùå No se encontr√≥ el script: {script_path}")
    
    # Calcular duraci√≥n total
    tiempo_fin = datetime.now()
    duracion_total = (tiempo_fin - tiempo_inicio).total_seconds()
    
    # Mostrar resumen
    print(f"\n{'='*50}")
    print(f"RESUMEN DE EJECUCI√ìN")
    print(f"{'='*50}")
    print(f"Total de agentes: {total}")
    print(f"Exitosos: {exitosos}")
    print(f"Fallidos: {fallidos}")
    print(f"Duraci√≥n total: {duracion_total:.2f} segundos")
    if total > 0:
        print(f"Tiempo promedio: {duracion_total/total:.2f} segundos por agente")
    
    return exitosos, fallidos

def parse_arguments():
    """Parsea los argumentos de l√≠nea de comandos"""
    parser = argparse.ArgumentParser(description="Lanzador de agentes TalentekIA")
    parser.add_argument("--config", "-c", 
                        default="talentek_agentes_config.toml",
                        help="Ruta al archivo de configuraci√≥n TOML")
    parser.add_argument("--real", "-r", 
                        action="store_true",
                        help="Ejecutar en modo real (usando APIs reales)")
    return parser.parse_args()

def main():
    """Funci√≥n principal"""
    # Parsear argumentos
    args = parse_arguments()
    
    print_banner()
    
    # Cargar variables de entorno
    env_loaded = cargar_variables_entorno()
    if env_loaded:
        print("‚úÖ Variables de entorno cargadas correctamente")
    else:
        print("‚ö†Ô∏è No se pudieron cargar las variables de entorno")
    
    # Determinar la ruta del archivo de configuraci√≥n TOML
    config_path = Path(args.config)
    if not config_path.exists():
        logger.error(f"Archivo de configuraci√≥n no encontrado: {config_path}")
        sys.exit(1)
    
    # Cargar la configuraci√≥n
    config = cargar_configuracion(config_path)
    if config is None:
        sys.exit(1)
    
    # Mostrar informaci√≥n del entorno
    if "entorno" in config:
        entorno = config["entorno"]
        print(f"\nEntorno: {entorno.get('nombre', 'No especificado')}")
        print(f"Chip: {entorno.get('chip', 'No especificado')}")
        print(f"Soporte Mac: {'S√≠' if entorno.get('soporte_mac', False) else 'No'}")
    
    # Mostrar informaci√≥n de personalizaci√≥n
    if "personalizacion" in config:
        pers = config["personalizacion"]
        print(f"Usuario: {pers.get('usuario', 'No especificado')}")
    
    # Mostrar modo de ejecuci√≥n
    modo_real = args.real
    if modo_real:
        print("\nüî¥ MODO REAL: Utilizando APIs y servicios reales")
    else:
        print("\nüîµ MODO SIMULACI√ìN: Datos de ejemplo (usa --real para modo real)")
    
    # Ejecutar los agentes
    print("\nIniciando ejecuci√≥n de agentes...")
    exitosos, fallidos = ejecutar_agentes(config, modo_real)
    
    # C√≥digo de salida basado en el √©xito de la ejecuci√≥n
    if fallidos > 0:
        sys.exit(1)
    else:
        sys.exit(0)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nProceso interrumpido por el usuario")
        sys.exit(130)  # C√≥digo est√°ndar para interrupci√≥n por SIGINT
    except Exception as e:
        logger.error(f"Error inesperado: {str(e)}", exc_info=True)
        sys.exit(1)